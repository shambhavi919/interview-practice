Coursera - Algorithms Part I
Week 1 - Interview Questions - Union Find

Question 3: Egg Drop

Suppose that you have an N-story building (with floors 1 through N) and plenty
of eggs. An egg breaks if it is dropped from floor T or higher and does not
break otherwise. Your goal is to devise a strategy to determine the value of T
given the following limitations on the number of eggs and tosses:

Version 0: 1 egg, ≤ T tosses.
Version 1: ~1lgN eggs and ~1lgN tosses.
Version 2: ~lgT eggs and ~2lgT tosses.
Version 3: 2 eggs and ~2sqrt(N) tosses.
Version 4: 2 eggs and ≤ c*sqrt(T) tosses for some fixed constant c.


Solutions:

Version 0
Try each floor starting from the bottom. The first floor that the egg breaks on
is the value of T.

Version 1
Use a binary search on the floors. First, try floor T/2. If the egg breaks, T
must be equal to T/2 or smaller. If the egg does not break, T must be greater
than T/2. Continue testing the mid-point of the subset of floors until T is
determined.

Version 2
Start test at floor 0 and exponentially grow (2^t) floor number until first egg
breaks. The value of T must be between 2^t and 2^(t-1). This range can then
be searched in ~lgT tosses using the technique from version 1.

Version 3
Test floors in increments of sqrt(N) starting from floor 0. When the egg breaks
on floor t, return to the previous test floor t-1 and increment by each floor.
The remaining sqrt(N) tests will be enough to check each floor between floor t-1
and t. The floor that breaks will be the value of T.

Version 4
Toss the egg from floors 1,3,6,10,15,21,28,36.....where floor 3 is sum of floors 1 and 2(1+2), floor 6 is sum of first 3 floors(1+2+3), floor 10 is sum of first 4 floors(1+2+3+4) and so on. If the egg broke when dropped from floor T we already did sqrt(2T) tosses and used 1 egg. Now doing sequential search from floor just before T and floor T. In doing so we did < sqrt(2T) tosses and used up the second egg.
So in total we did sqrt(2T) + sqrt(2T) i.e. 2sqrt(2T) tosses using 2 eggs. So, c = 2sqrt(2) 
